#include <QCoreApplication>

#include <QDebug>
#include <QSettings>
#include <QDir>
#include <QRegularExpression>
#include <QRegularExpressionMatch>

#include <iostream>
#include <cctype>
#include <limits>

#include "Console/KeyboardScanner.h"

#include "Globals.h"
#include "Modbus/DataUnits.h"
#include "Modbus/ModbusSerialMaster.h"
#include "Processing/ProcessingManager.h"
#include "Processing/RequestManager.h"

int main(int argc, char *argv[])
{
//	ProtocolDataUnit u({1,2,3});

	/// @warning The code assumes Linux OS to be used, as QSettings::setDefaultFormat(...INI...)
	/// does not behave properly - at least it reads no groups/values on construction.
	QCoreApplication a(argc, argv);
	QCoreApplication::setOrganizationName("PMCS");
	QCoreApplication::setOrganizationDomain("mendl.info");
	QCoreApplication::setApplicationName("LovatoModbus");

	// Make relative paths start in the application folder
//	QDir::setCurrent(QCoreApplication::applicationDirPath());

	KeyboardScanner ks;
	QObject::connect(&ks, &KeyboardScanner::KeyPressed, &a, [&](char c){
		qDebug() << c;
		switch (toupper(c)) {
		case 'Q':
			std::cout << "Quitting...\n";
			ks.finish();
			break;


		/* IMPORTANT !!!
		 *
		 * As following command empirically confirmed, root of system settings of Qt
		 * on Raspberry Pi lies NOT on / but rather on /usr/local/Qt-5.5.1-raspberry
		 * i.e. master Modbus cfg file is the
		 * /usr/local/Qt-5.5.1-raspberry/etc/xdg/PMCS/LovatoModbus.conf
		 */

		case 'W': // Write INI
		{
//			QSettings settings(QSettings::SystemScope,"PMCS", "LovatoModbus");
			QSettings settings;
			QTextStream in(stdin);
			QString str, value;

			ks.setDetection(false);
			const QRegularExpression pattern("(.*)=(.*)");
			QRegularExpressionMatch match;
			forever {
				qDebug() << "Enter KEY=VALUE:";
				str=in.readLine();
				if(str.isEmpty())
				break;

				if((match=pattern.match(str)).hasMatch()) {

					settings.setValue(match.captured(1), match.captured(2));
					qDebug().noquote() << "\twritten: " << match.captured(1) << "=" << settings.value(match.captured(1));
				}
			}
			ks.setDetection(true);
			break;
		}

		case 'R': // Read INI
		{
			QSettings settings;
			QTextStream in(stdin);
			QString str;

			ks.setDetection(false);
				qDebug() << "Enter KEY:";
				str=in.readLine();
				qDebug().noquote() << "\tread: " << str << "=" << settings.value(str);
			ks.setDetection(true);
			break;
		}

		case 'T': // Test various settings
		{

			QSettings settings;

			settings.setValue("Test/key","test1");
			settings.setValue("Test/arrayFromKey/size","2");
			settings.setValue("Test/arrayFromKey/1/item","item");
			settings.setValue("Test/arrayFromKey/2/subArray/size","1");
			settings.setValue("Test/arrayFromKey/2/subArray/1/item","subitem");
			settings.setValue("Test2/path/key","test2");

//			qDebug() << "\nallKeys =" << settings.allKeys();

			settings.beginGroup("Test");
			qDebug() << "\nTest/key=" << settings.value("key").toString();
			settings.beginReadArray("arrayFromKey");
			settings.setArrayIndex(2);
			foreach(QString key, settings.childKeys()) {
				qDebug() << key << "=" << settings.value(key).toString();
			}

			settings.beginReadArray("subArray");
			qDebug() << "\nsubArray:";
			foreach(QString key, settings.childKeys()) {
				qDebug() << key << "=" << settings.value(key).toString();
			}
		}


		// Check the ~/.config/PMCS/LovatoModbus.conf generated by this command
		case 'S': // Settings
		{
			QSettings settings;
			settings.beginGroup("Test");
			settings.setValue("true",true);
			settings.setValue("false",false);
			settings.endGroup();
		}
			break;

		case 'G': // Groups
		{
			QSettings active, group;
			active.beginGroup("Active");
			for(QString s : active.childKeys()) {
				qDebug() << "Group:" << s;
				group.beginGroup(s);
				qDebug() <<  group.childKeys();
				qDebug() <<  group.childGroups();
				group.endGroup();
			}
			active.endGroup();

		}
			break;


//----------------------------------

		qDebug() << "\nCOMMAND:";
		}

	}, Qt::QueuedConnection);
	QObject::connect(&ks, &KeyboardScanner::finished, &a, &QCoreApplication::quit);

	ks.start();
	if(Q_BYTE_ORDER == Q_BIG_ENDIAN)
		qDebug() << "Host uses big endianness.";
	else
		qDebug() << "Host uses little endianness.";

	if(std::numeric_limits<float>::is_iec559)
		qDebug() << "Host complies to IEEE 754.";
	else
		qDebug() << "Host does not comply to IEEE 754.";

	std::cout << "\nConstructing ProcessingManager object...\n";
	ProcessingManager p;
	std::cout << "\nModbus application started...\n\n";
	int result = a.exec();
	std::cout << "Modbus application quited...\n";
	return result;
}
